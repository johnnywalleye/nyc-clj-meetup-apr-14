<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1397400621993">{:repl-history {:ide [], :local [&quot;(get-sum numbers)&quot; &quot;(get-sum)&quot; &quot;(use 'clj-meetup.util)&quot; &quot;(get-sum-parallel)&quot; &quot;(p/sentence)&quot; &quot;(use 'clj-meetup.util :reload-all)&quot; &quot;(use 'clj-meetup.screenshots)&quot; &quot;(use 'clj-meetup.screenshots :reload-all)&quot; &quot;(count-words)&quot; &quot;(doc execute)&quot; &quot;()&quot; &quot;(use )&quot; &quot;(- (reduce + (map #(* % %) [1.0 2.0 3.0])) (* (reduce + [1.0 2.0 3.0]) (reduce + [1.0 2.0 3.0])))&quot; &quot;(/ (- (* (reduce + [1.0 2.0 3.0]) (reduce + [1.0 2.0 3.0])) (reduce + (map #(* % %) [1.0 2.0 3.0]))) 3)&quot; &quot;(- (* (reduce + [1.0 2.0 3.0]) (reduce + [1.0 2.0 3.0])) (reduce + (map #(* % %) [1.0 2.0 3.0])))&quot; &quot;(use 'clojure.contrib.math)&quot; &quot;(use 'clj-meetup.demos-test :reload-all) &quot; &quot;(use '(incanter core stats charts datasets))&quot; &quot;(def cars (get-dataset :cars))&quot; &quot;cars&quot; &quot;($ :speed cars)&quot; &quot;(type case)&quot; &quot;(type cars)&quot; &quot;(with-data (get-dataset :cars)\n           (view $data)\n           (view ($ [:Sepal.Length :Sepal.Width :Species]))\n           (view ($ [:not :Petal.Width :Petal.Length]))\n           (view ($ 0 [:not :Petal.Width :Petal.Length])))&quot; &quot;(doc matrix)&quot; &quot;(def mat (matrix (range 9) 3))&quot; &quot;(view mat)&quot; &quot;(type mat)&quot; &quot;(add mat mat)&quot; &quot;(+ mat mat)&quot; &quot;(plus mat mat)&quot; &quot;(doc plus)&quot; &quot;(use 'cascalog.playground)&quot; &quot;(bootstrap)&quot; &quot;(?&lt;- (stdout) [?count] (sentence ?sentence) (c/count ?count))&quot; &quot;(doc last)&quot; &quot;(doc butlast)&quot; &quot;(doc rest)&quot; &quot;i&quot; &quot;(i)&quot; &quot;(require 'incanter.core :as i)&quot; &quot;(use 'incanter.core)&quot; &quot;(matrix [1 2 3 2.5])&quot; &quot;(vectorize (matrix [1 2 3 2.5]))&quot; &quot;(def my-mat (matrix [1 2 3 0]))&quot; &quot;(vectorize my-mat)&quot; &quot;(list my-mat)&quot; &quot;(to-list my-mat)&quot; &quot;(doc -&gt;)&quot; &quot;(vec [1 2 3])&quot; &quot;(vector [1 2 3])&quot; &quot;(use 'clj-meetup.demos-test)&quot; &quot;(use 'clj-meetup.demos-test :reload-all)&quot;], :remote []}}</component>
</project>

